-- DROP SCHEMA public;

CREATE SCHEMA public AUTHORIZATION postgres;
CREATE SCHEMA logging AUTHORIZATION postgres;

-- DROP SEQUENCE public.ad_domains_id_seq;

CREATE SEQUENCE public.ad_domains_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.app_ads_entrys_id_seq;

CREATE SEQUENCE public.app_ads_entrys_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.app_ads_map_id_seq;

CREATE SEQUENCE public.app_ads_map_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.app_urls_map_id_seq;

CREATE SEQUENCE public.app_urls_map_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.crawl_results_id_seq;

CREATE SEQUENCE public.crawl_results_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.csv_store_app_dump_id_seq;

CREATE SEQUENCE public.csv_store_app_dump_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.developers_id_seq;

CREATE SEQUENCE public.developers_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.newtable_id_seq;

CREATE SEQUENCE public.newtable_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.pub_domains_id_seq;

CREATE SEQUENCE public.pub_domains_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.store_apps_id_seq;

CREATE SEQUENCE public.store_apps_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE public.stores_column1_seq;

CREATE SEQUENCE public.stores_column1_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;-- public.ad_domains definition

-- Drop table

-- DROP TABLE public.ad_domains;

CREATE TABLE public.ad_domains (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"domain" varchar NOT NULL,
	created_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	updated_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	CONSTRAINT ad_domains_pkey PRIMARY KEY (id),
	CONSTRAINT ad_domains_un UNIQUE (domain)
);

-- Table Triggers

CREATE TRIGGER ad_domains_updated_at BEFORE
UPDATE
    ON
    public.ad_domains FOR EACH ROW EXECUTE FUNCTION update_modified_column();


-- public.crawl_results definition

-- Drop table

-- DROP TABLE public.crawl_results;

CREATE TABLE public.crawl_results (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	outcome varchar NULL,
	CONSTRAINT crawl_results_pkey PRIMARY KEY (id)
);


-- public.platforms definition

-- Drop table

-- DROP TABLE public.platforms;

CREATE TABLE public.platforms (
	id int4 NOT NULL DEFAULT nextval('newtable_id_seq'::regclass),
	"name" varchar NOT NULL,
	CONSTRAINT platforms_pk PRIMARY KEY (id),
	CONSTRAINT platforms_un UNIQUE (name)
);


-- public.app_ads_entrys definition

-- Drop table

-- DROP TABLE public.app_ads_entrys;

CREATE TABLE public.app_ads_entrys (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	ad_domain int4 NOT NULL,
	publisher_id varchar NOT NULL,
	relationship varchar NOT NULL,
	certification_auth varchar NULL,
	notes varchar NULL,
	created_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	updated_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	CONSTRAINT app_ads_entrys_pkey PRIMARY KEY (id),
	CONSTRAINT app_ads_txt_un UNIQUE (ad_domain, publisher_id, relationship),
	CONSTRAINT app_ads_txt_fk FOREIGN KEY (ad_domain) REFERENCES public.ad_domains(id)
);

-- Table Triggers

CREATE TRIGGER app_ads_entrys_updated_at BEFORE
UPDATE
    ON
    public.app_ads_entrys FOR EACH ROW EXECUTE FUNCTION update_modified_column();


-- public.pub_domains definition

-- Drop table

-- DROP TABLE public.pub_domains;

CREATE TABLE public.pub_domains (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	url varchar NOT NULL,
	created_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	updated_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	crawl_result int4 NULL,
	crawled_at timestamp NULL,
	CONSTRAINT pub_domains_pkey PRIMARY KEY (id),
	CONSTRAINT pub_domains_un UNIQUE (url),
	CONSTRAINT pub_domains_fk FOREIGN KEY (crawl_result) REFERENCES public.crawl_results(id)
);

-- Table Triggers

CREATE TRIGGER pub_domains_crawled_at BEFORE
UPDATE
    OF crawl_result ON
    public.pub_domains FOR EACH ROW EXECUTE FUNCTION update_crawled_at();
CREATE TRIGGER pub_domains_updated_at BEFORE
UPDATE
    ON
    public.pub_domains FOR EACH ROW EXECUTE FUNCTION update_modified_column();


-- public.stores definition

-- Drop table

-- DROP TABLE public.stores;

CREATE TABLE public.stores (
	id int4 NOT NULL DEFAULT nextval('stores_column1_seq'::regclass),
	"name" varchar NOT NULL,
	platform int4 NULL,
	CONSTRAINT stores_pk PRIMARY KEY (id),
	CONSTRAINT stores_un UNIQUE (name),
	CONSTRAINT stores_fk FOREIGN KEY (platform) REFERENCES public.platforms(id)
);


-- public.app_ads_map definition

-- Drop table

-- DROP TABLE public.app_ads_map;

CREATE TABLE public.app_ads_map (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	pub_domain int4 NOT NULL,
	app_ads_entry int4 NOT NULL,
	created_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	updated_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	CONSTRAINT app_ads_map_pkey PRIMARY KEY (id),
	CONSTRAINT app_ads_map_un UNIQUE (pub_domain, app_ads_entry),
	CONSTRAINT app_ads_map_fk FOREIGN KEY (app_ads_entry) REFERENCES public.app_ads_entrys(id),
	CONSTRAINT app_ads_map_fk_1 FOREIGN KEY (pub_domain) REFERENCES public.pub_domains(id)
);

-- Table Triggers

CREATE TRIGGER app_ads_map_updated_at BEFORE
UPDATE
    ON
    public.app_ads_map FOR EACH ROW EXECUTE FUNCTION update_modified_column();


-- public.app_store_csv_dump definition

-- Drop table

-- DROP TABLE public.app_store_csv_dump;

CREATE TABLE public.app_store_csv_dump (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	platform int4 NOT NULL,
	store int4 NOT NULL,
	app_name text NULL,
	app_id text NOT NULL,
	category text NULL,
	rating float8 NULL,
	rating_count float8 NULL,
	installs text NULL,
	minimum_installs float8 NULL,
	maximum_installs int8 NULL,
	"free" bool NULL,
	price float8 NULL,
	currency text NULL,
	"size" text NULL,
	minimum_android text NULL,
	developer_id text NULL,
	developer_website text NULL,
	developer_email text NULL,
	released text NULL,
	last_updated text NULL,
	content_rating text NULL,
	privacy_policy text NULL,
	ad_supported bool NULL,
	in_app_purchases bool NULL,
	editors_choice bool NULL,
	CONSTRAINT csv_store_app_dump_pkey PRIMARY KEY (id),
	CONSTRAINT csv_store_app_dump_un UNIQUE (platform, store, app_id),
	CONSTRAINT csv_store_app_dump_fk FOREIGN KEY (platform) REFERENCES public.platforms(id),
	CONSTRAINT csv_store_app_dump_fk_01 FOREIGN KEY (store) REFERENCES public.stores(id)
);


-- public.developers definition

-- Drop table

-- DROP TABLE public.developers;

CREATE TABLE public.developers (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	store int4 NOT NULL,
	"name" varchar NULL,
	developer_id varchar NOT NULL,
	created_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	updated_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	CONSTRAINT developers_pkey PRIMARY KEY (id),
	CONSTRAINT developers_un UNIQUE (store, developer_id),
	CONSTRAINT developers_fk FOREIGN KEY (store) REFERENCES public.stores(id)
);
CREATE INDEX developers_name_idx ON developers USING GIN (to_tsvector('simple', name));
CREATE INDEX developers_developer_id_idx ON public.developers (developer_id);


CREATE TABLE store_collections (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    store int4 NOT NULL,
    collection varchar NOT NULL,
    CONSTRAINT store_collections_pk PRIMARY KEY (id),
    CONSTRAINT store_collections_fk FOREIGN KEY (store) REFERENCES public.stores(id),
    CONSTRAINT store_collections_un UNIQUE (store,
collection)
    )


-- Insert for Store: Google Play
INSERT INTO store_collections (store, collection) VALUES
(1, 'TOP_FREE'),
(1, 'TOP_PAID'),
(1, 'GROSSING');

-- Insert for Store: Apple
INSERT INTO store_collections (store, collection) VALUES
(2, 'TOP_FREE_IOS'),
(2, 'TOP_FREE_IPAD'),
(2, 'TOP_GROSSING_IOS'),
(2, 'TOP_GROSSING_IPAD'),
(2, 'TOP_PAID_IOS'),
(2, 'TOP_PAID_IPAD'),
(2, 'NEW_IOS'),
(2, 'NEW_PAID_IOS'),
(2, 'NEW_FREE_IOS')
;


CREATE TABLE store_categories (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    store int4 NOT NULL,
    category varchar NOT NULL,
    CONSTRAINT store_categories_pk PRIMARY KEY (id),
    CONSTRAINT store_categories_fk FOREIGN KEY (store) REFERENCES public.stores(id),
    CONSTRAINT store_categories_un UNIQUE (store,
category)
    )


CREATE TABLE app_rankings (
    id SERIAL PRIMARY KEY,
    crawled_date DATE NOT NULL,
    country int NOT NULL,
    store INT NOT NULL,
    store_collection INT NOT NULL,
    store_category INT NOT NULL,
    "rank" INT NOT NULL,
    store_app INT NOT NULL,
    CONSTRAINT fk_store FOREIGN KEY (store) REFERENCES stores(id),
    CONSTRAINT fk_store_collection FOREIGN KEY (store_collection) REFERENCES store_collections(id),
    CONSTRAINT fk_store_category FOREIGN KEY (store_category) REFERENCES store_categories(id),
    CONSTRAINT fk_country FOREIGN KEY (country) REFERENCES countries(id),
    CONSTRAINT fk_store_app FOREIGN KEY (store_app) REFERENCES store_apps(id),
    CONSTRAINT unique_ranking UNIQUE (crawled_date, country,
    "rank",
    store,
    store_collection,
    store_category)
);

    
    -- Insert for Store: 1
INSERT INTO store_categories (store, category) VALUES
(1, 'APPLICATION'),
(1, 'ANDROID_WEAR'),
(1, 'ART_AND_DESIGN'),
(1, 'AUTO_AND_VEHICLES'),
(1, 'BEAUTY'),
(1, 'BOOKS_AND_REFERENCE'),
(1, 'BUSINESS'),
(1, 'COMICS'),
(1, 'COMMUNICATION'),
(1, 'DATING'),
(1, 'EDUCATION'),
(1, 'ENTERTAINMENT'),
(1, 'EVENTS'),
(1, 'FINANCE'),
(1, 'FOOD_AND_DRINK'),
(1, 'HEALTH_AND_FITNESS'),
(1, 'HOUSE_AND_HOME'),
(1, 'LIBRARIES_AND_DEMO'),
(1, 'LIFESTYLE'),
(1, 'MAPS_AND_NAVIGATION'),
(1, 'MEDICAL'),
(1, 'MUSIC_AND_AUDIO'),
(1, 'NEWS_AND_MAGAZINES'),
(1, 'PARENTING'),
(1, 'PERSONALIZATION'),
(1, 'PHOTOGRAPHY'),
(1, 'PRODUCTIVITY'),
(1, 'SHOPPING'),
(1, 'SOCIAL'),
(1, 'SPORTS'),
(1, 'TOOLS'),
(1, 'TRAVEL_AND_LOCAL'),
(1, 'VIDEO_PLAYERS'),
(1, 'WATCH_FACE'),
(1, 'WEATHER'),
(1, 'GAME'),
(1, 'GAME_ACTION'),
(1, 'GAME_ADVENTURE'),
(1, 'GAME_ARCADE'),
(1, 'GAME_BOARD'),
(1, 'GAME_CARD'),
(1, 'GAME_CASINO'),
(1, 'GAME_CASUAL'),
(1, 'GAME_EDUCATIONAL'),
(1, 'GAME_MUSIC'),
(1, 'GAME_PUZZLE'),
(1, 'GAME_RACING'),
(1, 'GAME_ROLE_PLAYING'),
(1, 'GAME_SIMULATION'),
(1, 'GAME_SPORTS'),
(1, 'GAME_STRATEGY'),
(1, 'GAME_TRIVIA'),
(1, 'GAME_WORD'),
(1, 'FAMILY');

-- Insert for Store: 2
INSERT INTO store_categories (store, category) VALUES
(2, 'BOOKS'),
(2, 'BUSINESS'),
(2, 'CATALOGS'),
(2, 'EDUCATION'),
(2, 'ENTERTAINMENT'),
(2, 'FINANCE'),
(2, 'FOOD_AND_DRINK'),
(2, 'GAMES'),
(2, 'GAMES_ACTION'),
(2, 'GAMES_ADVENTURE'),
(2, 'GAMES_ARCADE'),
(2, 'GAMES_BOARD'),
(2, 'GAMES_CARD'),
(2, 'GAMES_CASINO'),
(2, 'GAMES_DICE'),
(2, 'GAMES_EDUCATIONAL'),
(2, 'GAMES_FAMILY'),
(2, 'GAMES_MUSIC'),
(2, 'GAMES_PUZZLE'),
(2, 'GAMES_RACING'),
(2, 'GAMES_ROLE_PLAYING'),
(2, 'GAMES_SIMULATION'),
(2, 'GAMES_SPORTS'),
(2, 'GAMES_STRATEGY'),
(2, 'GAMES_TRIVIA'),
(2, 'GAMES_WORD'),
(2, 'HEALTH_AND_FITNESS'),
(2, 'LIFESTYLE'),
(2, 'MAGAZINES_AND_NEWSPAPERS'),
(2, 'MAGAZINES_ARTS'),
(2, 'MAGAZINES_AUTOMOTIVE'),
(2, 'MAGAZINES_WEDDINGS'),
(2, 'MAGAZINES_BUSINESS'),
(2, 'MAGAZINES_CHILDREN'),
(2, 'MAGAZINES_COMPUTER'),
(2, 'MAGAZINES_FOOD'),
(2, 'MAGAZINES_CRAFTS'),
(2, 'MAGAZINES_ELECTRONICS'),
(2, 'MAGAZINES_ENTERTAINMENT'),
(2, 'MAGAZINES_FASHION'),
(2, 'MAGAZINES_HEALTH'),
(2, 'MAGAZINES_HISTORY'),
(2, 'MAGAZINES_HOME'),
(2, 'MAGAZINES_LITERARY'),
(2, 'MAGAZINES_MEN'),
(2, 'MAGAZINES_MOVIES_AND_MUSIC'),
(2, 'MAGAZINES_POLITICS'),
(2, 'MAGAZINES_OUTDOORS'),
(2, 'MAGAZINES_FAMILY'),
(2, 'MAGAZINES_PETS'),
(2, 'MAGAZINES_PROFESSIONAL'),
(2, 'MAGAZINES_REGIONAL'),
(2, 'MAGAZINES_SCIENCE'),
(2, 'MAGAZINES_SPORTS'),
(2, 'MAGAZINES_TEENS'),
(2, 'MAGAZINES_TRAVEL'),
(2, 'MAGAZINES_WOMEN'),
(2, 'MEDICAL'),
(2, 'MUSIC'),
(2, 'NAVIGATION'),
(2, 'NEWS'),
(2, 'PHOTO_AND_VIDEO'),
(2, 'PRODUCTIVITY'),
(2, 'REFERENCE'),
(2, 'SHOPPING'),
(2, 'SOCIAL_NETWORKING'),
(2, 'SPORTS'),
(2, 'TRAVEL'),
(2, 'UTILITIES'),
(2, 'WEATHER');

    



-- Table Triggers

CREATE TRIGGER developers_updated_at BEFORE
UPDATE
    ON
    public.developers FOR EACH ROW EXECUTE FUNCTION update_modified_column();


-- public.store_apps definition

-- Drop table

-- DROP TABLE public.store_apps;

CREATE TABLE public.store_apps (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	developer int4 NULL,
	"name" varchar NULL,
	store_id varchar NOT NULL,
	store int4 NOT NULL,
	category varchar NULL,
	rating float8 NULL,
    rating_count int NULL;
	review_count float8 NULL,
	installs float8 NULL,
	"free" bool NULL,
	price float8 NULL,
	"size" text NULL,
	minimum_android text NULL,
	developer_email text NULL,
	store_last_updated timestamp NULL,
	content_rating text NULL,
	ad_supported bool NULL,
	in_app_purchases bool NULL,
	editors_choice bool NULL,
    icon_url_512 varchar NULL,
    featured_image_url varchar NULL,
	phone_image_url_1 varchar NULL,
	phone_image_url_2 varchar NULL,
	phone_image_url_3 varchar NULL,
	tablet_image_url_1 varchar NULL,
	tablet_image_url_2 varchar NULL,
	tablet_image_url_3 varchar NULL,
    release_date date NULL,
	created_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	updated_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	crawl_result int4 NULL,
	CONSTRAINT store_apps_pkey PRIMARY KEY (id),
	CONSTRAINT store_apps_un UNIQUE (store, store_id),
	CONSTRAINT store_apps_fk FOREIGN KEY (store) REFERENCES public.stores(id),
	CONSTRAINT store_apps_fk_03 FOREIGN KEY (crawl_result) REFERENCES public.crawl_results(id),
	CONSTRAINT store_apps_fk_1 FOREIGN KEY (developer) REFERENCES public.developers(id)
);
CREATE INDEX store_apps_updated_at_idx ON public.store_apps USING btree (updated_at);
CREATE INDEX store_apps_store_id_idx ON public.store_apps USING btree (store_id);
CREATE INDEX store_apps_name_idx ON store_apps USING GIN (to_tsvector('simple', name));


-- public.store_apps_history definition

--DROP TABLE IF EXISTS store_apps_history;
CREATE TABLE store_apps_history (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    store_app INT REFERENCES store_apps(id),
    installs float8 NULL,
    review_count float8 NULL,
    rating float8 NULL,
    crawled_date DATE DEFAULT CURRENT_DATE,
    CONSTRAINT store_apps_history_pkey PRIMARY KEY (id),
    CONSTRAINT store_apps_history_un UNIQUE (store_app, crawled_date),
    CONSTRAINT store_apps_history_fk FOREIGN KEY (store_app) REFERENCES public.store_apps(id)
);

-- public.store_apps_country_history definition

-- Drop table

-- DROP TABLE public.store_apps_country_history;

CREATE TABLE public.store_apps_country_history (
	store_app int4 NOT NULL,
	review_count float8 NULL,
	rating float8 NULL,
	crawled_date date NULL,
	rating_count int4 NULL,
	histogram _int8 NULL DEFAULT ARRAY[]::integer[],
	installs int4 NULL,
	country varchar(2) NOT NULL DEFAULT 'US'::character varying,
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE),
	CONSTRAINT store_apps_country_history_pk PRIMARY KEY (id),
	CONSTRAINT store_apps_country_history_un UNIQUE (store_app, country, crawled_date),
	CONSTRAINT store_apps_country_history_app_fk FOREIGN KEY (store_app) REFERENCES public.store_apps(id),
	CONSTRAINT store_apps_country_history_fk FOREIGN KEY (country) REFERENCES public.countries(alpha2)
);


-- logging.developers_crawled_at definition

-- Drop table

-- DROP TABLE logging.developers_crawled_at;

CREATE TABLE logging.developers_crawled_at (
	developer int4 NOT NULL,
	apps_crawled_at timestamp NULL,
	CONSTRAINT developers_crawled_at_pk PRIMARY KEY (developer),
	CONSTRAINT newtable_fk FOREIGN KEY (developer) REFERENCES public.developers(id)
);

-- logging.developers_crawled_at definition

-- Drop table

-- DROP TABLE logging.developers_crawled_at;

CREATE TABLE logging.store_app_sources (
    store int2 NOT NULL,
    store_app int4 NOT NULL,
    crawl_source text NULL,
    CONSTRAINT store_app_sources_pk PRIMARY KEY (store, store_app),
    CONSTRAINT store_app_sources_store_fk FOREIGN KEY (store) REFERENCES public.stores(id),
    CONSTRAINT store_app_sources_app_fk FOREIGN KEY (store_app) REFERENCES public.store_apps(id) ON DELETE CASCADE
);




-- Table Triggers

CREATE TRIGGER store_app_audit AFTER
INSERT
    OR
DELETE
    OR
UPDATE
    ON
    public.store_apps FOR EACH ROW EXECUTE FUNCTION process_store_app_audit();
CREATE TRIGGER store_apps_updated_at BEFORE
UPDATE
    ON
    public.store_apps FOR EACH ROW EXECUTE FUNCTION update_modified_column();


-- public.app_urls_map definition

-- Drop table

-- DROP TABLE public.app_urls_map;

CREATE TABLE public.app_urls_map (
	id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	store_app int4 NOT NULL,
	pub_domain int4 NOT NULL,
	created_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	updated_at timestamp NULL DEFAULT timezone('utc'::text, now()),
	CONSTRAINT app_urls_map_pkey PRIMARY KEY (id),
	CONSTRAINT app_urls_un UNIQUE (store_app),
	CONSTRAINT app_urls_fk FOREIGN KEY (store_app) REFERENCES public.store_apps(id),
	CONSTRAINT app_urls_fk_1 FOREIGN KEY (pub_domain) REFERENCES public.pub_domains(id)
);

-- Table Triggers

CREATE TRIGGER app_urls_map_updated_at BEFORE
UPDATE
    ON
    public.app_urls_map FOR EACH ROW EXECUTE FUNCTION update_modified_column();


CREATE TABLE version_codes (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    store_app INTEGER NOT NULL,
    version_code INTEGER NOT NULL,
    crawl_result SMALLINT NOT NULL, 
    updated_at timestamp NULL DEFAULT timezone('utc'::text, now()),
    CONSTRAINT version_codes_pkey PRIMARY KEY (id),
    CONSTRAINT version_codes_un UNIQUE (store_app, version_code),
    CONSTRAINT vc_fk_store_app FOREIGN KEY(store_app) REFERENCES store_apps(id)
)
;

CREATE TABLE version_details (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    version_code INTEGER NOT NULL,
    xml_path TEXT NOT NULL,
    tag TEXT,
    android_name TEXT,
    CONSTRAINT version_details_pkey PRIMARY KEY (id),
    CONSTRAINT fk_vd_version_code FOREIGN KEY(version_code) REFERENCES version_codes(id)
);

-- Insert ISO 3166 countries to PostgreSQL

CREATE TABLE IF NOT EXISTS countries (
  id int4 NOT NULL,
  alpha2 varchar(2) NOT NULL,
  alpha3 varchar(3) NOT NULL,
  langCS varchar(45) NOT NULL,
  langDE varchar(45) NOT NULL,
  langEN varchar(45) NOT NULL,
  langES varchar(45) NOT NULL,
  langFR varchar(45) NOT NULL,
  langIT varchar(45) NOT NULL,
  langNL varchar(45) NOT NULL,
  CONSTRAINT countries_pk PRIMARY KEY (id),
  CONSTRAINT countries_al2 UNIQUE (alpha2),
  CONSTRAINT countries_al3 UNIQUE (alpha3)
) 