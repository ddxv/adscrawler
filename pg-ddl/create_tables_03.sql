-- ISO 3166 countries to PostgreSQL
CREATE TABLE IF NOT EXISTS countries (
    id int4 NOT NULL,
    alpha2 varchar(2) NOT NULL,
    alpha3 varchar(3) NOT NULL,
    langcs varchar(45) NOT NULL,
    langde varchar(45) NOT NULL,
    langen varchar(45) NOT NULL,
    langes varchar(45) NOT NULL,
    langfr varchar(45) NOT NULL,
    langit varchar(45) NOT NULL,
    langnl varchar(45) NOT NULL,
    CONSTRAINT countries_pk PRIMARY KEY (id),
    CONSTRAINT countries_al2 UNIQUE (alpha2),
    CONSTRAINT countries_al3 UNIQUE (alpha3)
);


CREATE TABLE public.trackers (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar NOT NULL,
    CONSTRAINT trackers_pk PRIMARY KEY (id)
);


CREATE TABLE public.tracker_package_map (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    tracker int4 NOT NULL,
    package_pattern varchar NOT NULL,
    CONSTRAINT tracker_package_map_pk PRIMARY KEY (id),
    CONSTRAINT fk_tracker_pkg_map FOREIGN KEY (
        tracker
    ) REFERENCES trackers (id)
);


CREATE TABLE public.networks (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar NOT NULL,
    CONSTRAINT networks_pk PRIMARY KEY (id)
);


CREATE TABLE public.network_package_map (
    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    network int4 NOT NULL,
    package_pattern varchar NOT NULL,
    CONSTRAINT network_package_map_pk PRIMARY KEY (id),
    CONSTRAINT fk_network_pkg_map FOREIGN KEY (
        network
    ) REFERENCES networks (id)
);

CREATE TABLE adtech.company_domain_mapping (
    company_id int REFERENCES adtech.companies (id),
    domain_id int REFERENCES public.ad_domains (id),
    PRIMARY KEY (company_id, domain_id)
);

CREATE TABLE user_requested_scan (
    id serial PRIMARY KEY,
    store_id varchar NOT NULL,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP
);

-- public.keywords definition

-- Drop table

-- DROP TABLE public.keywords;

CREATE TABLE public.keywords (
    id serial4 NOT NULL,
    keyword_text varchar(255) NOT NULL,
    CONSTRAINT keywords_pkey PRIMARY KEY (id),
    CONSTRAINT unique_keyword UNIQUE (keyword_text)
);

CREATE TABLE public.languages (
    id serial2 NOT NULL,
    language_slug varchar(5),
    CONSTRAINT language_pkey PRIMARY KEY (id),
    CONSTRAINT language_unique_key UNIQUE (language_slug)
);

CREATE TABLE public.app_keyword_rankings (
    id serial4 NOT NULL,
    crawled_date date NOT NULL,
    country int4 NOT NULL,
    lang int2 NOT NULL,
    keyword int4 NOT NULL,
    rank int4 NOT NULL,
    store_app int4 NOT NULL,
    CONSTRAINT app_keyword_rankings_pkey PRIMARY KEY (id),
    CONSTRAINT unique_keyword_ranking UNIQUE (
        crawled_date, country, lang, rank, store_app, keyword
    ),
    CONSTRAINT fk_country FOREIGN KEY (country) REFERENCES public.countries (
        id
    ),
    CONSTRAINT fk_language FOREIGN KEY (lang) REFERENCES public.languages (id),
    CONSTRAINT fk_store_app FOREIGN KEY (
        store_app
    ) REFERENCES public.store_apps (id),
    CONSTRAINT fk_store_keyword FOREIGN KEY (
        keyword
    ) REFERENCES public.keywords (id)
);



CREATE TABLE public.version_strings (
    id int4 GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE
    ) NOT NULL,
    xml_path text NOT NULL,
    tag text NULL,
    value_name text NOT NULL,
    CONSTRAINT version_strings_pkey PRIMARY KEY (id),
    CONSTRAINT version_strings_unique UNIQUE (xml_path, tag, value_name)
);


-- public.version_details_map definition

-- Drop table

-- DROP TABLE public.version_details_map;

CREATE TABLE public.version_details_map (
    id int8 NOT NULL,
    version_code int8 NULL,
    string_id int4 NULL,
    CONSTRAINT version_details_map_pkey PRIMARY KEY (id),
    CONSTRAINT version_details_map_unique UNIQUE (version_code, string_id)
);


-- public.version_details_map foreign keys

ALTER TABLE public.version_details_map ADD CONSTRAINT version_details_map_string_id_fkey FOREIGN KEY (
    string_id
) REFERENCES public.version_strings (id);



CREATE TABLE store_apps_descriptions (
    id serial PRIMARY KEY,
    store_app integer NOT NULL REFERENCES store_apps (id) ON DELETE CASCADE,
    language_id integer NOT NULL REFERENCES languages (id) ON DELETE CASCADE,
    description text NOT NULL,
    description_short text NOT NULL,
    title text NULL,
    updated_at timestamp DEFAULT NOW() NOT NULL,
    UNIQUE (store_app, language_id, description, description_short)
);


CREATE TABLE public.description_keywords (
    id serial PRIMARY KEY,
    description_id integer NOT NULL REFERENCES store_apps_descriptions (
        id
    ) ON DELETE CASCADE,
    keyword_id integer NOT NULL REFERENCES keywords (id) ON DELETE CASCADE,
    extracted_at timestamp DEFAULT NOW() NOT NULL,
    UNIQUE (description_id, keyword_id)
);


CREATE TABLE logging.keywords_crawled_at (
    keyword int4 NOT NULL,
    apps_crawled_at timestamp NULL,
    CONSTRAINT keywords_crawled_at_pk PRIMARY KEY (keyword),
    CONSTRAINT keywords_crawled_at_fk FOREIGN KEY (
        keyword
    ) REFERENCES public.keywords (id)
);


CREATE TABLE keywords_base (
    id serial PRIMARY KEY,
    keyword_id int REFERENCES keywords (id)
);


CREATE TABLE logging.store_app_waydroid_crawled_at (
    store_app int4 NOT NULL,
    crawl_result int2 NOT NULL,
    crawled_at timestamp NULL,
    CONSTRAINT waydroid_store_apps_crawl_fk FOREIGN KEY (
        store_app
    ) REFERENCES public.store_apps (id),
    CONSTRAINT waydroid_crawl_result_fk FOREIGN KEY (
        crawl_result
    ) REFERENCES public.crawl_results (id)
);
CREATE UNIQUE INDEX logging_store_app_upsert_unique ON logging.store_app_waydroid_crawled_at USING btree (
    store_app, crawl_result, crawled_at
);
